{
  "_args": [
    [
      "breakpoint",
      "/home/benoit/Documents/divers/petits_outils/blog_petits_outils"
    ]
  ],
  "_from": "breakpoint@latest",
  "_id": "breakpoint@0.1.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/breakpoint",
  "_phantomChildren": {
    "pkginfo": "0.2.3",
    "utile": "0.1.7",
    "wordwrap": "0.0.3"
  },
  "_requested": {
    "name": "breakpoint",
    "raw": "breakpoint",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/breakpoint/-/breakpoint-0.1.6.tgz",
  "_shasum": "be2a6ce5c074e8d8865d6f10a71152147df7145b",
  "_shrinkwrap": null,
  "_spec": "breakpoint",
  "_where": "/home/benoit/Documents/divers/petits_outils/blog_petits_outils",
  "author": {
    "name": "webryan"
  },
  "bin": {
    "breakpoint": "./bin/breakpoint"
  },
  "bugs": {
    "url": "https://github.com/webryan/breakpoint/issues"
  },
  "dependencies": {
    "coffee-script": "1.1.2",
    "http-proxy": "0.10.3",
    "node-watch": "0.2.4",
    "optimist": "0.2.6",
    "prompt": "0.2.9"
  },
  "description": "remote debugger tool. Console log and breakpoint are supported",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "be2a6ce5c074e8d8865d6f10a71152147df7145b",
    "tarball": "https://registry.npmjs.org/breakpoint/-/breakpoint-0.1.6.tgz"
  },
  "homepage": "https://github.com/webryan/breakpoint#readme",
  "keywords": [
    "breakpoint",
    "console",
    "console.log",
    "debug",
    "debugger",
    "remote"
  ],
  "license": "BSD",
  "main": "breakpoint.js",
  "maintainers": [
    {
      "name": "webryan",
      "email": "webryan@foxmail.com"
    }
  ],
  "name": "breakpoint",
  "optionalDependencies": {},
  "readme": "Aardwolf\r\n========\r\n\r\nAardwolf is a remote JavaScript debugger for Android / iOS / Windows Phone 7 / BlackBerry OS 6+ and is written in JavaScript. It's available under the MIT license.\r\n\r\nHome page: http://lexandera.com/aardwolf/\r\n\r\nCurrently it supports:\r\n\r\n* breakpoints\r\n* code evaluation at breakpoint\r\n* break on next\r\n* step/continue execution control\r\n* stack listing\r\n* exception reporting (also for exceptions thrown in async calls)\r\n* JavaScript console remoting\r\n\r\n\r\nIt consists of the following parts:\r\n\r\n* a server for communication between the mobile device and the UI\r\n* a code rewriter which injects debug info into your existing source code\r\n* a debug library which can break execution of your scripts, report execution progress, evaluate code, etc.\r\n* a UI for setting breakpoints, stepping through code and seeing the current position within the script\r\n\r\n\r\nIn order to run the examples you will need:\r\n\r\n* Node.js. Get it here: http://nodejs.org/#download\r\n* An Android 2.x/iOS/WindowsPhone7 device or emulator (although running them from a Firefox/Chrome/Safari window will also work)\r\n\r\n\r\nSetting it up\r\n----------------------------------------------------------------------------------------------------\r\n\r\n* Begin by installing node.js and Git\r\n* Get the Aardwolf source code from GitHub: \r\n`git clone git://github.com/lexandera/Aardwolf.git`\r\n* Download the required libraries by running \"npm link\" in the checked-out directory\r\n* Start the server by running \"node app.js -h &lt;ip-or-hostname-of-your-computer&gt;\"\r\n* After the server starts up, open http://localhost:8000 in your desktop browser. The debugger UI should appear.\r\n* Open http://ip-or-hostname-of-your-computer:8500/calc.html on your phone and wait for the page to load. The line \"Mobile device connected.\" should appear in the UI's output pane.\r\n* You're now debugging the \"calculator\" example script.\r\n\r\n\r\nIf you're having problems opening the example, make sure that access to the port 8500 on your computer is not blocked by a firewall and that the address you entered into the config file can really be accessed from your phone. This is where your phone will load the samples from, so it must work.\r\n\r\nYou will get best results by connecting both you computer and your phone to the same WiFi network.\r\n\r\n\r\nCoffeeScript support\r\n----------------------------------------------------------------------------------------------------\r\n\r\nAardwolf now also contains extrememly basic CoffeeScript support. It probably can't handle any serious real-world code, but it's a good starting point if someone wishes to fork the source and work on it.\r\n\r\nThe steps for debugging the CoffeeScript example are the same as the steps described above, except:\r\n\r\n* Replace calc.html with calc-coffee.html in the final step when opening the example.\r\n\r\n\r\nDebugging your own code\r\n----------------------------------------------------------------------------------------------------\r\n\r\nThe procedure is the same as above, except:\r\n\r\n* When starting the server, add an additional parameter called -d or --file-dir, like this:  \r\n    `node app.js -h <ip-or-hostname-of-your-computer> -d </path/to/www/root>`\r\n* In your HTML page include the aardwolf.js debug library as the very first JS file and change the paths of included files to point to the files modified by Aardwolf:\r\n    <pre>\r\n    &lt;script type=\"text/javascript\" src=\"http://ip-or-hostname-of-your-computer:8500/aardwolf.js\"&gt; &lt;/script&gt;\r\n    &lt;script type=\"text/javascript\" src=\"http://ip-or-hostname-of-your-computer:8500/some-script.js\"&gt; &lt;/script&gt;\r\n    &lt;script type=\"text/javascript\" src=\"http://ip-or-hostname-of-your-computer:8500/some-other-script.js\"&gt; &lt;/script&gt;\r\n    </pre>\r\n* Reload the debugger UI first, then reload the page you just modified. The line \"Mobile device connected.\" should appear in the UI's output pane.\r\n* You should now be able to evaluate code remotely, set breakpoints, etc.\r\n\r\n\r\nDebugging processed or minified code\r\n----------------------------------------------------------------------------------------------------\r\n\r\nIf you wish to debug code which gets concatenated into a single file, minified, or transformed in some other way, you can still use Aardwolf, but you'll need to make a minor change in the part of your application which reads the code before it gets transformed.\r\n\r\nIt is important that Aardwolf can access source files before they are processed. Therefore you will need to set it up just as described in the previous section, with the '-d' parameter pointing to the directory containing unprocessed files, then change the processing code in you application so it reads files served by Aardwolf instead of reading them straight from the filesystem.\r\n\r\nFor example, if your code looks something like this:\r\n\r\n    jscode += readFile('some-script.js');\r\n    jscode += readFile('some-other-script.js');\r\n\r\nyou would need to change it to something like this:\r\n    \r\n    jscode += readFile('http://aardwolf-host:8500/aardwolf.js'); // Don't forget to include this!\r\n    jscode += readFile('http://aardwolf-host:8500/some-script.js');\r\n    jscode += readFile('http://aardwolf-host:8500/some-other-script.js');\r\n\r\nIn most languages, making the modification should be pretty straightforward. PHP's `file_get_contents($url)` and Clojure's `(slurp url)` will handle the change from local paths to URLs transparently. In Scala you can use `io.Source.fromURL(url).mkString`, Ruby has the 'OpenURI' module and in NodeJS you should be able to read remote files using the 'request' module.\r\nbreakpoint tool\r\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webryan/breakpoint.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.1.6"
}
